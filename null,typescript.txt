
                        Ինչու է NULL-ի type-ը object, եթե null-ը համարվում է պարզունակ 



 JavaScript-ի պարզաբանումը ասում է null-ը պարզունակ արժեք է, որը ներկայացնում է որևէ օբյեկտի արժեքի դիտավորյալ բացակայությունը: Եթե ​​տեսնում եք null(կամ վերագրված է 

 փոփոխականին, կամ վերադարձվում է ֆունկցիայի կողմից), ապա այդ տեղում պետք է օբյեկտ լիներ, բայց ինչ-ինչ պատճառներով օբյեկտ չի ստեղծվել: Այսինքն, Ֆունկցիան կանչելիս 

 սպասվում է, որ ֆունկցիան վերադարձնում է օբյեկտ, առանց արգումենտների ֆունկցիան կանչելիս, ֆունկցիան վերադարձնում է null. Վերադարձը null ողջամիտ է, քանի որ պարամետրը 

 արժեք չունի։ Մտածելով իրական աշխարհի անալոգիայի մասին, դուք կարող եք պատկերացնել փոփոխականը որպես տուփ: Ճիշտ այնպես, ինչպես փոփոխականը կարող է պահել առարկան, տուփը 
 
 կարող է պարունակել առարկաներ:Բայց մի անգամ տուփ եք ստանում և բացում այն և այնտեղ ոչինչ չկա: Ինչ-որ մեկը սխալվել և ձեզ դատարկ տուփ է ուղարկել: Տուփը ոչինչ չի 
 
 պարունակում, կամ, այլ կերպ ասած, պարունակում է null արժեք։ Եթե ​​փոփոխականը պարունակում է ոչ զրոյական արժեք, ինչպես օբյեկտը, Object === null գնահատվում է false.

 Typeof value օպերատորը որոշում է արժեքի տեսակը: Օրինակ typeof 15-ը 'number' է, իսկ typeof null-ը գնահատվում է 'object'՝  typeof null; // => 'object', ինչպե՞ս կարող է 

 գնահատվել բացակայող օբյեկտի 'object' տեսակը : Պարզվում է, typoef null լինելը սխալ'object' էր JavaScript-ի վաղ ներդրման ժամանակ։ Null կարող է հայտնվել, հաճախ 

 անսպասելիորեն, այն իրավիճակներում, երբ դուք ակնկալում եք որևէ առարկա: 


                       ինչու՞ է TypeScript ֆայլը տեսնում JavaScript Ֆայլի մեջի եղածը, իսկ հակառակը ոչ

 Type script-ը կարդում է Java Script-ի մեջ գրված կոդերը և թույլ չի տալիս օրինակ նույն const փոփոխականին այլ արժեք տալ, եթե JS-ում արդեն արժեք տրվել է, 

 քանի որ npm package-ներ ենք install արել: Հակառակը չի լինում, քանի որ JS-ը իր մեջ չի ներառում TS, իսկ TS-ը իրենից ներկայացնում է JS + type-եր: 

